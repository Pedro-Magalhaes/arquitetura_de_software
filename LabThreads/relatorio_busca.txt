
LAB 2 ----- BUSCA EM VETOR ---------
******** FONTES  **********

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h> 
//vou definir o numero de filhos a serem criados
#define FILHOS 20
// tamanho do array com os elementos
#define ARRAY_SIZE 4096
#define RAND_LOWER_BOUND 0
#define RAND_UPPER_BOUND 400

// devolve um numero entre os limites
int limitedRand(int min, int max);

int main(void)
{
    int pid_filho, status;
    int i;
    int c[ARRAY_SIZE];
    int size = ARRAY_SIZE; //tamanho do vetor
    int passo, inicio = 0;

    passo = size / FILHOS;     //passo é o numero de posições que cada filho procura
    int sobra = size % FILHOS; //se há sobra, o ultimo filho vai procurar passo+sobra posições
    
    srand(time(0)); 
    
    int procurado = limitedRand(RAND_LOWER_BOUND,RAND_UPPER_BOUND);
    printf("Numero a ser buscado <%d> \n",procurado);
    // seed do rand é o tempo atual
    

    for (size_t i = 0; i < size; i++)
    {
        c[i] = limitedRand(RAND_LOWER_BOUND,RAND_UPPER_BOUND);
    }
    

    for (i = 0; i < FILHOS; i++)
    {
        inicio = i * passo; //posição inicial no vetor que cada fiho procura

        pid_filho = fork();
        if (pid_filho == 0)
        {
            break;
        }
            
    }

    if (pid_filho != 0)
    {
        for (int i = 0; i < FILHOS; i++)
        {
            wait(&status); /* wait for child to exit */
        }
    }
    else
    {
        pid_filho = getpid();
        int fim = inicio + passo; // inicio e passo é global para as threads e iniciado antes do fork
        int ocorrencias = 0;
        if (sobra && i == FILHOS - 1) //se o filho é o ultimo adiciono a sobra
        {
            fim = fim + sobra;
        }
        for (; inicio < fim; inicio++)
        {
            if (procurado == c[inicio])
            {
                ocorrencias++;
                printf("PID<%d>, Filho <%d> Encontrou na posição %d do vetor.\n", pid_filho, i, inicio);
            }
        }
        printf("PID<%d> fim da execução, filho numero:%d encontrou <%d> ocorrencias\n", pid_filho, i, ocorrencias);
        exit(-1);
    }

    return 0;
}


int limitedRand(int min, int max) 
{   
    return (rand() % (min - max + 1)) + min; 

}

********* RESULTADO NO CONSOLE **********

pfsmagalhaes@cass ~/Documents/puc/arquitetura/LabThreads$ ./busca 
Numero a ser buscado <340> 
PID<2430>, Filho <0> Encontrou na posição 164 do vetor.
PID<2430> fim da execução, filho numero:0 encontrou <1> ocorrencias
PID<2431> fim da execução, filho numero:1 encontrou <0> ocorrencias
PID<2432> fim da execução, filho numero:2 encontrou <0> ocorrencias
PID<2433> fim da execução, filho numero:3 encontrou <0> ocorrencias
PID<2434>, Filho <4> Encontrou na posição 985 do vetor.
PID<2434> fim da execução, filho numero:4 encontrou <1> ocorrencias
PID<2435>, Filho <5> Encontrou na posição 1222 do vetor.
PID<2435> fim da execução, filho numero:5 encontrou <1> ocorrencias
PID<2436>, Filho <6> Encontrou na posição 1255 do vetor.
PID<2436> fim da execução, filho numero:6 encontrou <1> ocorrencias
PID<2437>, Filho <7> Encontrou na posição 1597 do vetor.
PID<2437>, Filho <7> Encontrou na posição 1611 do vetor.
PID<2437> fim da execução, filho numero:7 encontrou <2> ocorrencias
PID<2438> fim da execução, filho numero:8 encontrou <0> ocorrencias
PID<2439> fim da execução, filho numero:9 encontrou <0> ocorrencias
PID<2440> fim da execução, filho numero:10 encontrou <0> ocorrencias
PID<2441>, Filho <11> Encontrou na posição 2344 do vetor.
PID<2441> fim da execução, filho numero:11 encontrou <1> ocorrencias
PID<2443> fim da execução, filho numero:13 encontrou <0> ocorrencias --- concorrencia (13 termina antes do 12)
PID<2442>, Filho <12> Encontrou na posição 2475 do vetor.
PID<2442> fim da execução, filho numero:12 encontrou <1> ocorrencias 
PID<2445> fim da execução, filho numero:15 encontrou <0> ocorrencias --- concorrencia (15 termina antes do 14)
PID<2444>, Filho <14> Encontrou na posição 2970 do vetor.
PID<2444> fim da execução, filho numero:14 encontrou <1> ocorrencias
PID<2447>, Filho <17> Encontrou na posição 3662 do vetor.
PID<2447> fim da execução, filho numero:17 encontrou <1> ocorrencias  --- concorrencia (17 termina antes do 16)
PID<2446>, Filho <16> Encontrou na posição 3270 do vetor.
PID<2446> fim da execução, filho numero:16 encontrou <1> ocorrencias
PID<2449> fim da execução, filho numero:19 encontrou <0> ocorrencias
PID<2448> fim da execução, filho numero:18 encontrou <0> ocorrencias

Conclusão, foi detectada a concorrencia pois algumas threads terminavam antes de threads criadas antes.
Obs. Meu processador tem 8 nucleos então só consegui que o programa imprimisse o log com sinais de concorrencia
quando executei criando mais threads, no caso acima usei 20 threads